{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wngml\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\react\\\\react-study\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// eslint-disable : lint 끄는 기능\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // state를 나중에 쓰고 싶다면 자료를 뽑는 문법을 적는다.\n  // let [a,b] -> destructuring문법\n  // 변수 vs state : 변수는 갑자기 변경되면 html에 자동으로 반영이 안됨, state는 자동 재렌더링됨\n  // array/object 다룰 때 원본은 보존하는 게 좋음\n  let [title, setTitle] = useState([\"남자코트추천\", \"강남 우동맛집\", \"파이썬독학\"]);\n  let [good, setGood] = useState([0, 0, 0]);\n  let [modal, setModal] = useState(0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"black-nav\",\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        let copy = [...title];\n        copy.sort();\n        setTitle(copy);\n      },\n      children: [\" \", \"\\uC815\\uB82C\\uBC84\\uD2BC\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        // state변경함수 특징 : 기존state == 신규 state의 경우 변경안해줌\n        // array/object 특징 : let arr= [1,2,3] array/object 담은 변수엔 화살표만 저장됨\n        // [...]=> spread operator 라고하는 문법인데\n        //array나 object 자료형 왼쪽에 붙일 수 있으며\n        //뜻은 별거없고 괄호를 벗겨주세요~ 라는 뜻입니다.\n        let copy = [...title];\n        copy[0] = \"여자코트추천\";\n        setTitle(copy);\n      },\n      children: \"\\uAE00\\uC218\\uC815\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), title.map(function (a, i) {\n      return (\n        /*#__PURE__*/\n        // 반복문을 돌릴때 html는 key라는 값을 가져야한다\n        _jsxDEV(\"div\", {\n          className: \"list\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            onClick: () => {\n              setModal(!modal);\n            },\n            children: title[i]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => {\n              let copy = [...good];\n              copy = good + 1;\n              setGood(copy);\n            },\n            children: \"\\uD83D\\uDC4D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), \" \", good[i], /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"2\\uC6D4 17\\uC77C \\uBC1C\\uD589\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      );\n    }), modal == true ? /*#__PURE__*/_jsxDEV(Modal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 24\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n\n// 컴포넌트 만드는 방법 1\n_s(App, \"IGOFVM5EaBOOqR2banilju6wd5Q=\");\n_c = App;\nfunction Modal() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"\\uC81C\\uBAA9\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uB0A0\\uC9DC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uC0C1\\uC138\\uB0B4\\uC6A9\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n// 컴포넌트 만드는 방법 2\n//let Modal = ()=>{}\n_c2 = Modal;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Modal\");","map":{"version":3,"names":["useState","App","title","setTitle","good","setGood","modal","setModal","copy","sort","map","a","i","Modal"],"sources":["C:/Users/wngml/OneDrive/바탕 화면/react/react-study/src/App.js"],"sourcesContent":["// eslint-disable : lint 끄는 기능\nimport { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  // state를 나중에 쓰고 싶다면 자료를 뽑는 문법을 적는다.\n  // let [a,b] -> destructuring문법\n  // 변수 vs state : 변수는 갑자기 변경되면 html에 자동으로 반영이 안됨, state는 자동 재렌더링됨\n  // array/object 다룰 때 원본은 보존하는 게 좋음\n  let [title, setTitle] = useState([\n    \"남자코트추천\",\n    \"강남 우동맛집\",\n    \"파이썬독학\",\n  ]);\n  let [good, setGood] = useState([0, 0, 0]);\n  let [modal, setModal] = useState(0);\n  return (\n    <div className=\"App\">\n      <div className=\"black-nav\">\n        <h4>logo</h4>\n      </div>\n      <button\n        onClick={() => {\n          let copy = [...title];\n          copy.sort();\n          setTitle(copy);\n        }}\n      >\n        {\" \"}\n        정렬버튼{\" \"}\n      </button>\n      <button\n        onClick={() => {\n          // state변경함수 특징 : 기존state == 신규 state의 경우 변경안해줌\n          // array/object 특징 : let arr= [1,2,3] array/object 담은 변수엔 화살표만 저장됨\n          // [...]=> spread operator 라고하는 문법인데\n          //array나 object 자료형 왼쪽에 붙일 수 있으며\n          //뜻은 별거없고 괄호를 벗겨주세요~ 라는 뜻입니다.\n          let copy = [...title];\n          copy[0] = \"여자코트추천\";\n          setTitle(copy);\n        }}\n      >\n        글수정\n      </button>\n      {/* <div className=\"list\">\n        <h4>\n          {title[0]} */}\n      {/* onClick={함수명만, 함수 만드는 문법 전체를 바로 넣어도 됨} \n          state 변경 시에는 등호로 변경하면 안된다 ex)  good=good+1\n         바꾸는 방법 :  state변경함수(새로운 state) ex) setGood(1)\n          */}\n      {/* <span\n            onClick={() => {\n              setGood(good + 1);\n            }}\n          >\n            👍\n          </span>{\" \"}\n          {good}\n        </h4>\n\n        <p>2월 17일 발행</p>\n      </div>\n\n      <div className=\"list\">\n        <h4>{title[1]}</h4>\n        <p>2월 17일 발행</p>\n      </div>\n      <div className=\"list\">\n        <h4\n          onClick={() => {\n            setModal(!modal);\n          }}\n        >\n          {title[2]}\n        </h4>\n        <p>2월 17일 발행</p>\n      </div> */}\n\n      {/* function(a,i) a-> 안에 들어가는 내용 i-> 반복문 돌 때마다 0부터 1씩 증가하는 함수 */}\n      {title.map(function (a, i) {\n        return (\n          // 반복문을 돌릴때 html는 key라는 값을 가져야한다\n          <div className=\"list\" key={i}>\n            <h4\n              onClick={() => {\n                setModal(!modal);\n              }}\n            >\n              {title[i]}\n            </h4>\n            <span\n              onClick={() => {\n                let copy = [...good];\n                copy = good + 1;\n                setGood(copy);\n              }}\n            >\n              👍\n            </span>{\" \"}\n            {good[i]}\n            <p>2월 17일 발행</p>\n          </div>\n        );\n      })}\n\n      {/* if문 대신 삼항연산자 사용 */}\n      {/* {조건식 ? 참일 때 실행할 코드 : 거짓일 때 실행할 코드} */}\n      {/* 내가 쓴 풀이식 -> \n       <h4\n          onClick={() => {\n            setModal(modal + 1);\n          }}\n        >\n\n      {modal % 2 == 1 ? <Modal /> : null} */}\n      {/* 애플 코딩 정답 */}\n      {modal == true ? <Modal></Modal> : null}\n    </div>\n  );\n}\n\n// 컴포넌트 만드는 방법 1\nfunction Modal() {\n  return (\n    <div className=\"modal\">\n      <h4>제목</h4>\n      <p>날짜</p>\n      <p>상세내용</p>\n    </div>\n  );\n}\n// 컴포넌트 만드는 방법 2\n//let Modal = ()=>{}\nexport default App;\n"],"mappings":";;AAAA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,WAAW;AAAC;AAEnB,SAASC,GAAG,GAAG;EAAA;EACb;EACA;EACA;EACA;EACA,IAAI,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGH,QAAQ,CAAC,CAC/B,QAAQ,EACR,SAAS,EACT,OAAO,CACR,CAAC;EACF,IAAI,CAACI,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EACzC,IAAI,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACnC,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MAAK,SAAS,EAAC,WAAW;MAAA,uBACxB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAa;MAAA;MAAA;MAAA;IAAA,QACT,eACN;MACE,OAAO,EAAE,MAAM;QACb,IAAIQ,IAAI,GAAG,CAAC,GAAGN,KAAK,CAAC;QACrBM,IAAI,CAACC,IAAI,EAAE;QACXN,QAAQ,CAACK,IAAI,CAAC;MAChB,CAAE;MAAA,WAED,GAAG,8BACC,GAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QACD,eACT;MACE,OAAO,EAAE,MAAM;QACb;QACA;QACA;QACA;QACA;QACA,IAAIA,IAAI,GAAG,CAAC,GAAGN,KAAK,CAAC;QACrBM,IAAI,CAAC,CAAC,CAAC,GAAG,QAAQ;QAClBL,QAAQ,CAACK,IAAI,CAAC;MAChB,CAAE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAGK,EAqCRN,KAAK,CAACQ,GAAG,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;MACzB;QAAA;QACE;QACA;UAAK,SAAS,EAAC,MAAM;UAAA,wBACnB;YACE,OAAO,EAAE,MAAM;cACbL,QAAQ,CAAC,CAACD,KAAK,CAAC;YAClB,CAAE;YAAA,UAEDJ,KAAK,CAACU,CAAC;UAAC;YAAA;YAAA;YAAA;UAAA,QACN,eACL;YACE,OAAO,EAAE,MAAM;cACb,IAAIJ,IAAI,GAAG,CAAC,GAAGJ,IAAI,CAAC;cACpBI,IAAI,GAAGJ,IAAI,GAAG,CAAC;cACfC,OAAO,CAACG,IAAI,CAAC;YACf,CAAE;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAGG,EAAC,GAAG,EACVJ,IAAI,CAACQ,CAAC,CAAC,eACR;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAgB;QAAA,GAlBSA,CAAC;UAAA;UAAA;UAAA;QAAA;MAmBtB;IAEV,CAAC,CAAC,EAaDN,KAAK,IAAI,IAAI,gBAAG,QAAC,KAAK;MAAA;MAAA;MAAA;IAAA,QAAS,GAAG,IAAI;EAAA;IAAA;IAAA;IAAA;EAAA,QACnC;AAEV;;AAEA;AAAA,GAvHSL,GAAG;AAAA,KAAHA,GAAG;AAwHZ,SAASY,KAAK,GAAG;EACf,oBACE;IAAK,SAAS,EAAC,OAAO;IAAA,wBACpB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAW,eACX;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAS,eACT;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAW;EAAA;IAAA;IAAA;IAAA;EAAA,QACP;AAEV;AACA;AACA;AAAA,MAVSA,KAAK;AAWd,eAAeZ,GAAG;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}